[
    {
        "id": "b759bc5bafe40a88",
        "type": "subflow",
        "name": "Turn on/off conditioners",
        "info": "",
        "category": "",
        "in": [
            {
                "x": 40,
                "y": 240,
                "wires": [
                    {
                        "id": "cc261f46bfff446a"
                    }
                ]
            }
        ],
        "out": [],
        "env": [],
        "meta": {},
        "color": "#A6BBCF",
        "icon": "node-red-node-wol/onoff.png"
    },
    {
        "id": "ba4c0f9c0a4410b5",
        "type": "function",
        "z": "b759bc5bafe40a88",
        "name": "GET data",
        "func": "let ID = msg.payload.conditionerID;\nlet msgId = msg.payload.msgId;\n\nmsg.topic = `SELECT DISTINCT *, '${msgId}' as msgId `+\n            \"FROM smartAirConditioner AS sac \"+\n            \"JOIN apartment AS ap \"+\n            \"ON sac.apartmentID = ap.apartmentID \"+\n            \"WHERE ID = \"+ ID;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 380,
        "y": 300,
        "wires": [
            [
                "ca71dc8528c2b014"
            ]
        ]
    },
    {
        "id": "ca71dc8528c2b014",
        "type": "mysql",
        "z": "b759bc5bafe40a88",
        "mydb": "3d82484f23ccce80",
        "name": "Query",
        "x": 510,
        "y": 300,
        "wires": [
            [
                "1ae5f71151c0ece7"
            ]
        ]
    },
    {
        "id": "1ae5f71151c0ece7",
        "type": "change",
        "z": "b759bc5bafe40a88",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "complete",
                "pt": "msg",
                "to": "true",
                "tot": "bool"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 595,
        "y": 300,
        "wires": [
            [
                "df900b968dd4372d"
            ]
        ],
        "l": false
    },
    {
        "id": "c129469c2303e4d7",
        "type": "change",
        "z": "b759bc5bafe40a88",
        "name": "",
        "rules": [
            {
                "t": "delete",
                "p": "complete",
                "pt": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 375,
        "y": 220,
        "wires": [
            [
                "df900b968dd4372d"
            ]
        ],
        "l": false
    },
    {
        "id": "cc261f46bfff446a",
        "type": "function",
        "z": "b759bc5bafe40a88",
        "name": "Assign ID to message",
        "func": "let ID = makeID(16);\n\nlet dataType = msg.payload.dataType;\n\nif(dataType === \"Temperature\"){\n    let message1 = {\n        payload: {\n            dataType: dataType,\n            dataValue: msg.payload.dataValue,\n            msgId: ID\n        }\n    }\n    \n    let message2 = {\n        payload: {\n            conditionerID: msg.payload.conditionerID,\n            msgId: ID\n        }\n    }\n    return [message1, message2];\n}\n\n\n\n\n\nfunction makeID(size) {\n    var result           = '';\n    var characters       = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\n    var charactersLength = characters.length;\n    for ( var i = 0; i < size; i++ ) {\n        result += characters.charAt(Math.floor(Math.random() * charactersLength));\n    }\n    return result;\n}",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 200,
        "y": 240,
        "wires": [
            [
                "c129469c2303e4d7"
            ],
            [
                "ba4c0f9c0a4410b5"
            ]
        ]
    },
    {
        "id": "df900b968dd4372d",
        "type": "function",
        "z": "b759bc5bafe40a88",
        "name": "Async join",
        "func": "if(msg.complete === undefined){\n    //È arrivato il messaggio con i dati raccolti dai sensori\n    //Get the values\n    \n    let msgId = msg.payload.msgId;\n    node.send([null, msg])\n    //Create or Get the dictionary\n    let dictionary = context.get(\"dictionary\");\n    \n    if(dictionary === undefined)\n        dictionary = {};\n    \n    let dictValue = dictionary[msgId];\n    if(dictValue === undefined){\n        // È il primo messaggio che arriva delle due parti\n        dictionary[msgId] = msg.payload\n        context.set(\"dictionary\", dictionary);\n    }\n    else{\n        // Stranamente è arrivata la query prima di questa parte,\n        // quindi fondiamo i due messaggi e lo inviamo.\n        node.send([null, {payload:\" Strano1\"}])\n        let mesg1 = {\n            payload : {\n                dataType: dataType,\n                dataValue: dataValue,\n                dbData: dictValue\n            }\n        }\n        delete dictionary[msgId];\n        node.send([msg1, msg1]);\n    }\n}\nelse{\n    //È arrivato il messaggio con il risultato della query dal db\n    //Create or Get the dictionary\n    node.send([null, msg])\n    let dictionary = context.get(\"dictionary\");\n    let msgId = msg.payload[0].msgId;\n    if(dictionary === undefined)\n        dictionary = {};\n        \n    let dictValue = dictionary[msgId];\n    if(dictValue === undefined){\n        //Non è ancora arrivato il messaggio con i dati dei sensori\n        dictionary[msgId] = {\n            dbData: msg.payload[0]\n        }\n        context.set(\"dictionary\", dictionary);\n    }\n    else{\n        //Caso normale, la query arriva dopo i dati dei sensori\n        let dataType = dictValue.dataType;\n        let dataValue = dictValue.dataValue;\n        \n        let mesg2 = {\n            payload: {\n                dataType: dataType,\n                dataValue: dataValue,\n                dbData: msg.payload[0]\n            }\n        };\n        delete dictionary[msgId];\n        node.send([mesg2,mesg2]);\n    } \n}\nnode.done();",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 710,
        "y": 220,
        "wires": [
            [
                "9d0d1695f61d1cb6",
                "9e197975ed92e993"
            ],
            []
        ],
        "outputLabels": [
            "",
            "DEBUG"
        ]
    },
    {
        "id": "9d0d1695f61d1cb6",
        "type": "function",
        "z": "b759bc5bafe40a88",
        "name": "Analyze and send",
        "func": "let floor = msg.payload.dbData.floor;\nlet devID = msg.payload.dbData.boardNumber;\nlet apNumber = msg.payload.dbData.apartment_number;\n\nlet ideal_temp = msg.payload.dbData.ideal_temperature;\nlet temp = msg.payload.dataValue;\n\n\nlet OMA_actuation = 3306\n\nif(temp - ideal_temp > 3){\n    // The temperature is too high\n    let message = {\n        topic:`cmd/esp32/${floor}/${apNumber}/${devID}/${OMA_actuation}/0/5850`,\n        payload:{\n            v:'on'\n        }\n    }\n    node.send(message);\n}\nelse if(temp -ideal_temp < -3){\n    // The temperature is too low\n    let message = {\n        topic:`cmd/esp32/${floor}/${apNumber}/${devID}/${OMA_actuation}/1/5850`,\n        payload:{\n            v:'on'\n        }\n    }\n    node.send(message);\n}\nelse{\n    //The temperature is ok\n    let message = {\n        topic:`cmd/esp32/${floor}/${apNumber}/${devID}/${OMA_actuation}/0/5850`,\n        payload:{\n            v:'off'\n        }\n    }\n    node.send(message);\n    let message2 = {\n        topic:`cmd/esp32/${floor}/${apNumber}/${devID}/${OMA_actuation}/1/5850`,\n        payload:{\n            v:'off'\n        }\n    }\n    node.send(message2);\n}\n\nnode.done();",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 910,
        "y": 220,
        "wires": [
            [
                "fe909a666cd4c9fc",
                "ebd7ea368d35a649"
            ]
        ]
    },
    {
        "id": "fe909a666cd4c9fc",
        "type": "mqtt out",
        "z": "b759bc5bafe40a88",
        "name": "To Boards",
        "topic": "",
        "qos": "0",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "54d52f8897b8d24f",
        "x": 1100,
        "y": 220,
        "wires": []
    },
    {
        "id": "ebd7ea368d35a649",
        "type": "debug",
        "z": "b759bc5bafe40a88",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1070,
        "y": 160,
        "wires": []
    },
    {
        "id": "9e197975ed92e993",
        "type": "debug",
        "z": "b759bc5bafe40a88",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 870,
        "y": 160,
        "wires": []
    },
    {
        "id": "a60a0e2d3ea912b4",
        "type": "subflow",
        "name": "GET inactive conditioners",
        "info": "",
        "category": "",
        "in": [
            {
                "x": 280,
                "y": 220,
                "wires": [
                    {
                        "id": "1ca8eaf5715f590d"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 980,
                "y": 220,
                "wires": [
                    {
                        "id": "a801cc5fa090656f",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [],
        "meta": {},
        "color": "#F3B567",
        "icon": "node-red/db.svg"
    },
    {
        "id": "1ca8eaf5715f590d",
        "type": "function",
        "z": "a60a0e2d3ea912b4",
        "name": "GET conditioners",
        "func": "let floor = msg.payload.floor;\nlet apNumber = msg.payload.apNumber;\n\nmsg.topic = \"SELECT * from smartAirConditioner AS sac \"+\n            \"JOIN apartment AS ap \"+\n            \"ON sac.apartmentID = ap.apartmentID \"+\n            \"WHERE sac.connected = 0\";\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 430,
        "y": 220,
        "wires": [
            [
                "63447a13c1b521a7"
            ]
        ]
    },
    {
        "id": "63447a13c1b521a7",
        "type": "mysql",
        "z": "a60a0e2d3ea912b4",
        "mydb": "3d82484f23ccce80",
        "name": "Query",
        "x": 610,
        "y": 220,
        "wires": [
            [
                "ed07e35775d5c6a4"
            ]
        ]
    },
    {
        "id": "ed07e35775d5c6a4",
        "type": "change",
        "z": "a60a0e2d3ea912b4",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "complete",
                "pt": "msg",
                "to": "true",
                "tot": "bool"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 705,
        "y": 220,
        "wires": [
            [
                "a801cc5fa090656f"
            ]
        ],
        "l": false
    },
    {
        "id": "a801cc5fa090656f",
        "type": "delay",
        "z": "a60a0e2d3ea912b4",
        "name": "",
        "pauseType": "delay",
        "timeout": "50",
        "timeoutUnits": "milliseconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 830,
        "y": 220,
        "wires": [
            []
        ]
    },
    {
        "id": "0e60f7bd99c4789e",
        "type": "subflow",
        "name": "Prepare tensorData for storage",
        "info": "",
        "category": "",
        "in": [
            {
                "x": 180,
                "y": 260,
                "wires": [
                    {
                        "id": "3bdd3cf5600b369d"
                    },
                    {
                        "id": "4a223d0455fc0a09"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 700,
                "y": 260,
                "wires": [
                    {
                        "id": "a576031b2a19d883",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [],
        "meta": {},
        "color": "#FFCC66",
        "icon": "node-red/parser-json.svg"
    },
    {
        "id": "a576031b2a19d883",
        "type": "function",
        "z": "0e60f7bd99c4789e",
        "name": "Convert",
        "func": "if(msg.complete === undefined){\n    context.set(\"tensorData\", msg.payload);\n    node.done();\n}\nelse{\n    let tensorData = context.get(\"tensorData\");\n    let temperature = tensorData.temperature;\n    let humidity = tensorData.humidity;\n    let conditionerID = msg.payload[0].ID;\n    \n    let msg1 = {\n        payload: {\n            dataType: \"Temperature\",\n            dataValue: temperature,\n            conditionerID: conditionerID\n        }\n    };\n    node.send(msg1);\n    \n    let msg2 = {\n        payload: {\n            dataType: \"Humidity\",\n            dataValue: humidity,\n            conditionerID: conditionerID\n        }\n    }\n    node.send(msg2);\n    node.done();\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 580,
        "y": 260,
        "wires": [
            []
        ]
    },
    {
        "id": "3bdd3cf5600b369d",
        "type": "change",
        "z": "0e60f7bd99c4789e",
        "name": "",
        "rules": [
            {
                "t": "delete",
                "p": "complete",
                "pt": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 255,
        "y": 260,
        "wires": [
            [
                "a576031b2a19d883"
            ]
        ],
        "l": false
    },
    {
        "id": "0d59ab5ae5c75b9e",
        "type": "change",
        "z": "0e60f7bd99c4789e",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "complete",
                "pt": "msg",
                "to": "true",
                "tot": "bool"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 485,
        "y": 340,
        "wires": [
            [
                "a576031b2a19d883"
            ]
        ],
        "l": false
    },
    {
        "id": "4a223d0455fc0a09",
        "type": "subflow:a60a0e2d3ea912b4",
        "z": "0e60f7bd99c4789e",
        "name": "",
        "x": 330,
        "y": 340,
        "wires": [
            [
                "0d59ab5ae5c75b9e"
            ]
        ]
    },
    {
        "id": "20ed0c1f2d52531b",
        "type": "subflow",
        "name": "Async Store on DB",
        "info": "",
        "category": "",
        "in": [
            {
                "x": 40,
                "y": 280,
                "wires": [
                    {
                        "id": "2742599b5a8ad17e"
                    }
                ]
            }
        ],
        "out": [],
        "env": [],
        "meta": {},
        "color": "#E7E7AE",
        "icon": "node-red-contrib-buffer-array/buffer-array.png"
    },
    {
        "id": "2742599b5a8ad17e",
        "type": "function",
        "z": "20ed0c1f2d52531b",
        "name": "GET last measures",
        "func": "let msgId = makeID(16);\n\nlet dataValue = msg.payload.dataValue;\nlet dataType = msg.payload.dataType;\nlet conditionerID = msg.payload.conditionerID;\n\nlet table = \"humidity\";\nif(dataType === \"temperature\")\n    table = \"temperature\";\nlet query = {\n    payload: \"\",\n    topic: `SELECT *, '${msgId}' AS msgId FROM temperature `+\n            `WHERE conditionerID = ${conditionerID} `+\n            \"ORDER BY year DESC, month DESC, day DESC,\"+\n            \"hour DESC, minute DESC LIMIT 1;\"+\n            `SELECT *, '${msgId}' AS msgId FROM humidity `+\n            `WHERE conditionerID = ${conditionerID} `+\n            \"ORDER BY year DESC, month DESC, day DESC,\"+\n            \"hour DESC, minute DESC LIMIT 1;\"\n}\n\nmsg.payload.msgId = msgId;\nreturn [query, msg];\n\n\n\n\n\n\n\nfunction makeID(length) {\n    var result           = '';\n    var characters       = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\n    var charactersLength = characters.length;\n    for ( var i = 0; i < length; i++ ) {\n        result += characters.charAt(Math.floor(Math.random() * charactersLength));\n    }\n    return result;\n}",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 210,
        "y": 280,
        "wires": [
            [
                "748718c85adc7974"
            ],
            [
                "3cf623b24bda5f84"
            ]
        ],
        "outputLabels": [
            "QUERY",
            "DATA"
        ]
    },
    {
        "id": "3cf623b24bda5f84",
        "type": "change",
        "z": "20ed0c1f2d52531b",
        "name": "",
        "rules": [
            {
                "t": "delete",
                "p": "complete",
                "pt": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 355,
        "y": 300,
        "wires": [
            [
                "7e0907f84d2c7032"
            ]
        ],
        "l": false
    },
    {
        "id": "748718c85adc7974",
        "type": "mysql",
        "z": "20ed0c1f2d52531b",
        "mydb": "3d82484f23ccce80",
        "name": "Query",
        "x": 390,
        "y": 220,
        "wires": [
            [
                "4168be837adfdefb"
            ]
        ]
    },
    {
        "id": "4168be837adfdefb",
        "type": "delay",
        "z": "20ed0c1f2d52531b",
        "name": "",
        "pauseType": "delay",
        "timeout": "50",
        "timeoutUnits": "milliseconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 530,
        "y": 220,
        "wires": [
            [
                "eb96e90a27c31d8c"
            ]
        ]
    },
    {
        "id": "eb96e90a27c31d8c",
        "type": "change",
        "z": "20ed0c1f2d52531b",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "complete",
                "pt": "msg",
                "to": "true",
                "tot": "bool"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 635,
        "y": 220,
        "wires": [
            [
                "7e0907f84d2c7032"
            ]
        ],
        "l": false
    },
    {
        "id": "7e0907f84d2c7032",
        "type": "function",
        "z": "20ed0c1f2d52531b",
        "name": "Async Join",
        "func": "if(msg.complete === undefined){\n\n    // siamo al messaggio proveniente dai sensori\n    let dictionary = context.get(\"dictionary\");\n    if(dictionary === undefined){\n        dictionary = {};\n    }\n    let msgId = msg.payload.msgId;\n    let dictValue = dictionary[msgId];\n    if(dictValue === undefined){\n        // Caso normale\n        dictionary[msgId] = msg.payload;\n        context.set(\"dictionary\", dictionary);\n    }\n    else{\n        // Stranamente è arrivato prima il messaggio dal DB\n        let message = {\n            payload : {\n                dataType: msg.payload.dataType,\n                dataValue: msg.payload.dataValue,\n                lastTempMeasure: dictValue[0][0],\n                lastHumMeasure: dictValue[1][0]\n            }\n        }\n        delete dictionary[msgId];\n        node.send(message);\n    }\n}\nelse{\n    \n    // siamo al messaggio proveniente dal db\n    let dictionary = context.get(\"dictionary\");\n    if(dictionary === undefined){\n        dictionary = {}\n    }\n    let dbMsg = msg.payload;\n    if(dbMsg !== undefined){\n        // Se dbMsg è undefined non c'è modo per noi \n        // di recuperare il msgId. È assurdo che contenga una\n        // stringa vuota, probabilmente c'è stato un errore col DB.\n        // In quel caso non facciamo nulla, quindi gestiamo solo il caso\n        // in cui dbMsg abbia contenuto\n        let msgId = dbMsg[0][0].msgId;\n        let dictValue = dictionary[msgId];\n        \n        if(dictValue === undefined){\n            // Non abbiamo ricevuto i dati precedenti. È strano,\n            // ma non possiamo fare altro che salvare i dati della\n            // query nel dizionario e aspettare che arrivino gli altri\n            // dati.\n            dictionary[msgId] = dbMsg;\n        }\n        else{\n            // Ora abbiamo tutti i dati, possiamo inviare il messaggio\n            let message = {\n                payload: {\n                    dataType: dictValue.dataType,\n                    dataValue: dictValue.dataValue,\n                    lastTempMeasure: dbMsg[0][0],\n                    lastHumMeasure: dbMsg[1][0]\n                }\n            }\n            node.send(message);\n        }\n            \n    }\n}\nnode.done();",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 730,
        "y": 300,
        "wires": [
            [
                "17221cc83b70147c"
            ]
        ]
    },
    {
        "id": "10d5115924ac48cc",
        "type": "mysql",
        "z": "20ed0c1f2d52531b",
        "mydb": "3d82484f23ccce80",
        "name": "Execute",
        "x": 1080,
        "y": 300,
        "wires": [
            []
        ]
    },
    {
        "id": "17221cc83b70147c",
        "type": "function",
        "z": "20ed0c1f2d52531b",
        "name": "INSERT",
        "func": "let type = msg.payload.dataType;\nlet value = msg.payload.dataValue;\nlet date = new Date()\n\nlet year = date.getFullYear();\nlet month = date.getMonth()+1;\nlet day = date.getDate();\nlet hour = date.getHours();\nlet minute = date.getMinutes();\nlet second = 0;\n\nlet lastTempMeasure = msg.payload.lastTempMeasure;\nlet lastHumMeasure = msg.payload.lastHumMeasure;\nlet conditionerID = lastTempMeasure.conditionerID;\nif(type === \"Temperature\"){\n    let message = {\n        payload: \"\",\n        topic: \"INSERT INTO temperature (conditionerID, year, month, \"+\n                \"day, hour, minute, second, recent_temperature, \"+\n                \"recent_humidity, target_temperature) VALUES (\"+\n                conditionerID+\", \"+\n                year+\", \"+\n                month+\", \"+\n                day+\", \"+\n                hour+\", \"+\n                minute+\", \"+\n                \"0.0, \"+\n                lastTempMeasure.target_temperature+\", \"+\n                lastHumMeasure.target_humidity+\", \"+\n                value+\")\"\n    }\n    return message;\n}\nelse if (type === \"Humidity\"){\n    let message = {\n        payload: \"\",\n        topic: \"INSERT INTO humidity (conditionerID, year, month, \"+\n                \"day, hour, minute, second, recent_temperature, \"+\n                \"recent_humidity, target_humidity) VALUES (\"+\n                conditionerID+\", \"+\n                year+\", \"+\n                month+\", \"+\n                day+\", \"+\n                hour+\", \"+\n                minute+\", \"+\n                \"0.0, \"+\n                lastTempMeasure.target_temperature+\", \"+\n                lastHumMeasure.target_humidity+\", \"+\n                value+\")\"\n    }\n    return message;\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 900,
        "y": 300,
        "wires": [
            [
                "10d5115924ac48cc",
                "c72d15f8d8a5394b"
            ]
        ]
    },
    {
        "id": "c72d15f8d8a5394b",
        "type": "debug",
        "z": "20ed0c1f2d52531b",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1030,
        "y": 240,
        "wires": []
    },
    {
        "id": "578662589e383bc4",
        "type": "subflow",
        "name": "GET conditionerID",
        "info": "",
        "category": "",
        "in": [
            {
                "x": 240,
                "y": 300,
                "wires": [
                    {
                        "id": "e82debd0285b09b1"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 940,
                "y": 300,
                "wires": [
                    {
                        "id": "3e5eed8e5e15b670",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [],
        "meta": {},
        "color": "#F3B567",
        "icon": "node-red/db.svg"
    },
    {
        "id": "e82debd0285b09b1",
        "type": "function",
        "z": "578662589e383bc4",
        "name": "GET conditionerID",
        "func": "let devID = msg.payload.device;\nlet floor = msg.payload.floor;\nlet apartment = msg.payload.apartment;\nlet messageId = msg.payload.messageId;\n\nmsg.topic = `SELECT sac.ID, '${messageId}' AS messageId `+\n            \"FROM smartAirConditioner AS sac \"+\n            \"JOIN apartment AS ap \"+\n            \"ON sac.apartmentID = ap.apartmentID \"+\n            \"WHERE sac.boardNumber = \"+devID+\" \"+\n            \"AND ap.apartment_number = \"+apartment+\" \"+\n            \"AND ap.floor = \"+floor;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 390,
        "y": 300,
        "wires": [
            [
                "a36f8de114896ba8"
            ]
        ]
    },
    {
        "id": "a36f8de114896ba8",
        "type": "mysql",
        "z": "578662589e383bc4",
        "mydb": "3d82484f23ccce80",
        "name": "Query",
        "x": 570,
        "y": 300,
        "wires": [
            [
                "36031fe3c824ac04"
            ]
        ]
    },
    {
        "id": "36031fe3c824ac04",
        "type": "change",
        "z": "578662589e383bc4",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "complete",
                "pt": "msg",
                "to": "true",
                "tot": "bool"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 685,
        "y": 300,
        "wires": [
            [
                "3e5eed8e5e15b670"
            ]
        ],
        "l": false
    },
    {
        "id": "3e5eed8e5e15b670",
        "type": "delay",
        "z": "578662589e383bc4",
        "name": "",
        "pauseType": "delay",
        "timeout": "50",
        "timeoutUnits": "milliseconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 810,
        "y": 300,
        "wires": [
            []
        ]
    },
    {
        "id": "619727cf4484ac7c",
        "type": "subflow",
        "name": "Async Input Management",
        "info": "",
        "category": "",
        "in": [
            {
                "x": 60,
                "y": 240,
                "wires": [
                    {
                        "id": "add1c533e7eeb66d"
                    },
                    {
                        "id": "a26bf02b53b73799"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 1020,
                "y": 260,
                "wires": [
                    {
                        "id": "8c4d51f25a73873f",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [],
        "meta": {},
        "color": "#D7D7A0",
        "icon": "node-red-contrib-buffer-array/buffer-array.png"
    },
    {
        "id": "add1c533e7eeb66d",
        "type": "function",
        "z": "619727cf4484ac7c",
        "name": "Format data",
        "func": "let topic = msg.topic;\nlet topicLevels = topic.split('/');\nlet floor = topicLevels[2];\nlet apartment = topicLevels[3];\nlet device = topicLevels[4];\nlet dataType = topicLevels[5];\nlet dataValue\n\nlet messageId = makeID(16);\n\nswitch(topicLevels[5]){\n    case \"3303\": \n        dataType = \"Temperature\"; \n        dataValue = convertToFahrenheit(msg.payload.v)\n        break;\n    case \"3304\":\n        dataType = \"Humidity\"; \n        dataValue = msg.payload.v;\n        break;\n    default: dataType = \"Unknown\"; break;\n}\n\nlet msg1 = {\n    payload: {\n        floor: floor,\n        apartment: apartment,\n        device: device,\n        messageId: messageId\n    }\n}\n\n\nlet msg2 = {\n    payload : {\n        dataType: dataType,\n        dataValue: dataValue,\n        messageId: messageId\n    }\n}\nreturn [msg1,msg2];\n\n\nfunction makeID(size) {\n    var result           = '';\n    var characters       = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\n    var charactersLength = characters.length;\n    for ( var i = 0; i < size; i++ ) {\n        result += characters.charAt(Math.floor(Math.random() * charactersLength));\n    }\n    return result;\n}\n\n\nfunction convertToFahrenheit(celsiusValue){\n    return (celsiusValue * 1.8) + 32.0;\n}",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 370,
        "y": 240,
        "wires": [
            [
                "9b09dc98bd477dab"
            ],
            [
                "a8d4e829717bb6e2"
            ]
        ],
        "outputLabels": [
            "APARTMENT DATA",
            "SENSOR DATA"
        ]
    },
    {
        "id": "9b09dc98bd477dab",
        "type": "subflow:578662589e383bc4",
        "z": "619727cf4484ac7c",
        "name": "",
        "x": 570,
        "y": 200,
        "wires": [
            [
                "8c4d51f25a73873f"
            ]
        ]
    },
    {
        "id": "a8d4e829717bb6e2",
        "type": "change",
        "z": "619727cf4484ac7c",
        "name": "",
        "rules": [
            {
                "t": "delete",
                "p": "complete",
                "pt": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 495,
        "y": 260,
        "wires": [
            [
                "8c4d51f25a73873f"
            ]
        ],
        "l": false
    },
    {
        "id": "8c4d51f25a73873f",
        "type": "function",
        "z": "619727cf4484ac7c",
        "name": "Async Join",
        "func": "if(msg.complete === undefined){\n    //È arrivato il messaggio con i dati raccolti dai sensori\n    //Get the values\n    \n    let msgId = msg.payload.messageId;\n    \n    //Create or Get the dictionary\n    let dictionary = context.get(\"dictionary\");\n    \n    if(dictionary === undefined)\n        dictionary = {};\n    \n    let dictValue = dictionary[msgId];\n    if(dictValue === undefined){\n        // È il primo messaggio che arriva delle due parti\n        node.send([null, {payload: \"Primo messaggio\"}])\n        let dataType = msg.payload.dataType;\n        let dataValue = msg.payload.dataValue;\n        \n        dictionary[msgId] = {\n            dataType: dataType,\n            dataValue: dataValue\n        };\n        node.send([null, {payload:dictionary}]);\n        context.set(\"dictionary\", dictionary);\n    }\n    else{\n        // Stranamente è arrivata la query prima di questa parte,\n        // quindi fondiamo i due messaggi e lo inviamo.\n        node.send([null, {payload:\" Strano1\"}])\n        let conditionerID = dictValue.conditionerID;\n        let mesg1 = {\n            payload : {\n                dataType: dataType,\n                dataValue: dataValue,\n                conditionerID: conditionerID\n            }\n            \n        }\n        \n        delete dictionary[msgId];\n        \n        node.send([msg1, msg1]);\n    }\n}\nelse{\n    node.send([null, {payload: \"OK 2\"}]);\n    //È arrivato il messaggio con il risultato della query dal db\n    let conditionerID = msg.payload[0].ID;\n    //Create or Get the dictionary\n    let dictionary = context.get(\"dictionary\");\n    let msgId = msg.payload[0].messageId;\n    if(dictionary === undefined)\n        dictionary = {};\n        \n    let dictValue = dictionary[msgId];\n    if(dictValue === undefined){\n        //Non è ancora arrivato il messaggio con i dati dei sensori\n        dictionary[msgId] = {\n            conditionerID: conditionerID\n        }\n        context.set(\"dictionary\", dictionary);\n    }\n    else{\n        //Caso normale, la query arriva dopo i dati dei sensori\n        let dataType = dictValue.dataType;\n        let dataValue = dictValue.dataValue;\n        \n        let mesg2 = {\n            payload: {\n                dataType: dataType,\n                dataValue: dataValue,\n                conditionerID: conditionerID\n            }\n        };\n        \n        delete dictionary[msgId];\n        node.send([mesg2,mesg2]);\n    } \n}\nnode.done();",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 770,
        "y": 260,
        "wires": [
            [],
            []
        ],
        "outputLabels": [
            "RESULT",
            "DEBUG"
        ]
    },
    {
        "id": "a26bf02b53b73799",
        "type": "debug",
        "z": "619727cf4484ac7c",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 190,
        "y": 200,
        "wires": []
    },
    {
        "id": "6a818e5b5d7c88ac",
        "type": "subflow",
        "name": "List and Split Conditioners",
        "info": "",
        "category": "",
        "in": [
            {
                "x": 160,
                "y": 260,
                "wires": [
                    {
                        "id": "f63908919d75f815"
                    },
                    {
                        "id": "c998a54b4150b4c5"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 680,
                "y": 200,
                "wires": [
                    {
                        "id": "1ff92b9cae24ab42",
                        "port": 0
                    }
                ]
            },
            {
                "x": 700,
                "y": 300,
                "wires": [
                    {
                        "id": "3f5793d077201384",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [],
        "meta": {},
        "color": "#AAAA66",
        "outputLabels": [
            "DEVICES",
            "TENSORFLOW"
        ],
        "icon": "font-awesome/fa-list-ol"
    },
    {
        "id": "f63908919d75f815",
        "type": "function",
        "z": "6a818e5b5d7c88ac",
        "name": "Get Conditioners",
        "func": "let topicParts = msg.topic.split('/');\n\nlet floor = topicParts[2];\nlet apNumber = topicParts[3];\n\n\nlet msg1 ={\n    topic : \"SELECT DISTINCT * FROM smartAirConditioner AS sac \"+\n            \"JOIN apartment AS ap \" +\n            \"ON sac.apartmentID = ap.apartmentID \"+\n            \"WHERE ap.floor = \"+floor+\" \"+\n            \"AND ap.apartment_number = \"+apNumber+\" \"+\n            \"AND sac.active = 1 \"+\n            \"AND sac.connected = 1\"\n    \n}\n\nlet msg2 ={\n    topic : \"SELECT DISTINCT * FROM smartAirConditioner AS sac \"+\n            \"JOIN apartment AS ap \" +\n            \"ON sac.apartmentID = ap.apartmentID \"+\n            \"WHERE ap.floor = \"+floor+\" \"+\n            \"AND ap.apartment_number = \"+apNumber+\" \"+\n            \"AND sac.active = 1 \"+\n            \"AND sac.connected = 0\"\n    \n}\nreturn [msg1,msg2];",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 310,
        "y": 260,
        "wires": [
            [
                "1ff92b9cae24ab42"
            ],
            [
                "3f5793d077201384"
            ]
        ]
    },
    {
        "id": "9d24563b47f074da",
        "type": "comment",
        "z": "6a818e5b5d7c88ac",
        "name": "DOC",
        "info": "In this subflow we obtain the list of smartAirConditioners of the user, understanding if there is also someone disconnected",
        "x": 210,
        "y": 100,
        "wires": []
    },
    {
        "id": "1ff92b9cae24ab42",
        "type": "mysql",
        "z": "6a818e5b5d7c88ac",
        "mydb": "3d82484f23ccce80",
        "name": "Query",
        "x": 490,
        "y": 200,
        "wires": [
            []
        ]
    },
    {
        "id": "96fa9801cbf360f9",
        "type": "function",
        "z": "6a818e5b5d7c88ac",
        "name": "Split Conditioners",
        "func": "let connectedConditioners = [];\nlet disconnectedConditioners = [];\n\nmsg.payload.forEach(conditioner => {\n   if(conditioner.connected){\n       //CONNECTED\n       connectedConditioners.push(conditioner);\n   }\n   else{\n       //DISCONNECTED\n       disconnectedConditioners.push(conditioner);\n   }\n});\n\nlet msg1 = {\n    payload: connectedConditioners\n}\n\nlet msg2 = {\n    payload: disconnectedConditioners\n}\nreturn [msg1, msg2];",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 670,
        "y": 400,
        "wires": [
            [],
            []
        ],
        "outputLabels": [
            "CONNECTED LIST",
            "DISCONNECTED LIST"
        ]
    },
    {
        "id": "3f5793d077201384",
        "type": "mysql",
        "z": "6a818e5b5d7c88ac",
        "mydb": "3d82484f23ccce80",
        "name": "Query",
        "x": 490,
        "y": 300,
        "wires": [
            []
        ]
    },
    {
        "id": "c998a54b4150b4c5",
        "type": "debug",
        "z": "6a818e5b5d7c88ac",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 270,
        "y": 200,
        "wires": []
    },
    {
        "id": "82a301b2b7fb01c3",
        "type": "subflow",
        "name": "Compare prevision & weather",
        "info": "",
        "category": "",
        "in": [
            {
                "x": 60,
                "y": 280,
                "wires": [
                    {
                        "id": "01898ce3697279b6"
                    },
                    {
                        "id": "3ac3e5b74af27a71"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 1240,
                "y": 280,
                "wires": [
                    {
                        "id": "491653a7af2fe87f",
                        "port": 0
                    },
                    {
                        "id": "30479ec43ba00bd3",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [],
        "meta": {},
        "color": "#34D2FF",
        "outputLabels": [
            "VALUES",
            "APARTMENT"
        ],
        "icon": "font-awesome/fa-sun-o"
    },
    {
        "id": "01898ce3697279b6",
        "type": "function",
        "z": "82a301b2b7fb01c3",
        "name": "Get Location",
        "func": "let topic = msg.topic;\nlet topicParts = topic.split('/');\n\nlet floor = topicParts[2];\nlet apartment = topicParts[3];\n\n//Now we create the query\nmsg.topic = \"SELECT * \" +\n            \"FROM apartment \"+\n            \"WHERE floor = \"+floor+\" \"+\n            \"AND apartment_number = \"+apartment;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 130,
        "y": 440,
        "wires": [
            [
                "b175817c81c154dc"
            ]
        ]
    },
    {
        "id": "b175817c81c154dc",
        "type": "mysql",
        "z": "82a301b2b7fb01c3",
        "mydb": "3d82484f23ccce80",
        "name": "Query",
        "x": 270,
        "y": 440,
        "wires": [
            [
                "fed2064b34555cab"
            ]
        ]
    },
    {
        "id": "fed2064b34555cab",
        "type": "function",
        "z": "82a301b2b7fb01c3",
        "name": "Create web query",
        "func": "let openWeatherApiKey = \"be38a76c3fbd03f63957ba455cfa6314\";\n\nif(msg.payload[0].length === 0){\n    /* La query non ha restituito nulla.\n     * Non sappiamo la località nè tantomeno la qualità dell'edificio,\n     * quindi processiamo il valore di tensorFlow così com'è arrivato\n     */\n    abortAverage();\n}\n\nelse{\n    /*\n     * La query ha restituito dei valori, però devono essere tutti e \n     * 3 valorizzati, altrimenti l'algoritmo non può funzionare\n     */\n    let latitude = msg.payload[0].latitude;\n    let longitude = msg.payload[0].longitude;\n    //let latitude = 38.907983;\n    //let longitude = 16.578234;\n    let quality = msg.payload[0].building_quality;\n    \n    if(latitude === undefined\n       || longitude === undefined\n       || quality === undefined){\n           abortAverage();\n    }\n\n    let msg1 = {\n        payload: quality,\n        complete: true\n    }\n    let URL = \"https://api.openweathermap.org/data/2.5/weather\";\n    URL += \"?lat=\"+latitude;\n    URL += \"&lon=\"+longitude;\n    URL += \"&units=imperial\";\n    URL += \"&appid=\"+openWeatherApiKey;\n    let msg2 = {\n        url: URL\n    };\n    return [msg1, msg2];\n}\n\n\nfunction abortAverage(){\n    let msg1 = {\n        payload: 0,\n        complete: true\n    }\n    return [msg1, null];\n}\n\n\n",
        "outputs": 3,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 390,
        "y": 360,
        "wires": [
            [
                "3ac3e5b74af27a71"
            ],
            [
                "82fdec3b31250976"
            ],
            []
        ],
        "outputLabels": [
            "Quality",
            "OpenWeatherMap Query",
            "DEBUG"
        ]
    },
    {
        "id": "82fdec3b31250976",
        "type": "http request",
        "z": "82a301b2b7fb01c3",
        "name": "OpenWeatherMap API",
        "method": "GET",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "authType": "",
        "senderr": false,
        "x": 560,
        "y": 440,
        "wires": [
            [
                "98afda52203c56e4"
            ]
        ]
    },
    {
        "id": "98afda52203c56e4",
        "type": "json",
        "z": "82a301b2b7fb01c3",
        "name": "",
        "property": "payload",
        "action": "",
        "pretty": false,
        "x": 730,
        "y": 440,
        "wires": [
            [
                "4eaafb91979162e2"
            ]
        ]
    },
    {
        "id": "491653a7af2fe87f",
        "type": "function",
        "z": "82a301b2b7fb01c3",
        "name": "Average",
        "func": "if(msg.complete === undefined){\n\n    context.set(\"tensorData\", msg.payload)\n    node.done();\n}\n\nelse{\n    let tensorData = context.get(\"tensorData\");\n    let predictedHumidity = tensorData.predictedHumidity;\n    let predictedTemp = tensorData.predictedTemperature;\n    let quality = tensorData.quality;\n    node.send([null, null, {payload: tensorData}])\n    let floor = tensorData.floor;\n    let apartment = tensorData.apartment;\n    let actualTemp = msg.payload.actualTemperature;\n    let actualHum = msg.payload.actualHumidity;\n    \n        \n    let avgTemp;\n    let avgHum;\n    \n    switch(quality){\n        case 1: avgTemp= predictedTemp*0.1 + actualTemp*0.9; break;\n        case 2: avgTemp= predictedTemp*0.3 + actualTemp*0.7; break;\n        case 3: avgTemp= predictedTemp*0.5 + actualTemp*0.5; break;\n        case 4: avgTemp= predictedTemp*0.7 + actualTemp*0.3; break;\n        case 5: avgTemp= predictedTemp*0.9 + actualTemp*0.1; break;\n        default: avgTemp = predictedTemp;\n    }\n    \n    switch(quality){\n        case 1: avgHum= predictedHumidity*0.1 + actualHum*0.9; break;\n        case 2: avgHum= predictedHumidity*0.3 + actualHum*0.7; break;\n        case 3: avgHum= predictedHumidity*0.5 + actualHum*0.5; break;\n        case 4: avgHum= predictedHumidity*0.7 + actualHum*0.3; break;\n        case 5: avgHum= predictedHumidity*0.9 + actualHum*0.1; break;\n        default: avgHum = predictedHumidity;\n    }\n    \n    msg.payload = {\n        temperature: avgTemp,\n        humidity: avgHum,\n        floor: floor,\n        apartment: apartment\n    }\n    let msg2 = {\n        payload: {\n            floor: floor,\n            apartment: apartment\n        }\n    }\n    return [msg, msg2, null];\n}\n\n",
        "outputs": 3,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1000,
        "y": 380,
        "wires": [
            [],
            [],
            []
        ],
        "outputLabels": [
            "",
            "",
            "DEBUG"
        ]
    },
    {
        "id": "3ac3e5b74af27a71",
        "type": "function",
        "z": "82a301b2b7fb01c3",
        "name": "Join quality & Tensorflow Data",
        "func": "if(msg.complete===undefined){\n    context.set(\"tensorData\", msg.payload);\n    context.set(\"topic\",msg.topic);\n    node.done();\n}\nelse{\n    let tensorData = context.get(\"tensorData\");\n    let topic = context.get(\"topic\");\n    context.set(\"tensorData\", '');\n    context.set(\"topic\", '');\n    \n    let topicParts = topic.split(\"/\");\n    let predictedTemperature = tensorData.predictedTemperature;\n    let predictedHumidity = tensorData.predictedHumidity;\n    let quality = msg.payload;\n    \n    if(quality == 0){\n        /* Non abbiamo dati per andare avanti con la media\n         * quindi restituiamo direttamente i valori di tensorFlow\n         */\n        let msg = {\n            payload: {\n                predictedHumidity: predictedHumidity,\n                predictedTemperature: predictedTemperature,\n                floor: topicParts[2],\n                apartment: topicParts[3]\n            }\n            \n        }\n        node.send([msg, null]);\n    }\n    else{\n        /*\n         * Possiamo procedere con il calcolo dell'average\n         */\n        let msg = {\n            payload: {\n                predictedHumidity: predictedHumidity,\n                predictedTemperature: predictedTemperature,\n                quality: quality,\n                floor: topicParts[2],\n                apartment: topicParts[3]\n            },\n            complete : undefined\n        };\n        node.send([null, msg]);\n    }\n    node.done();\n    \n    \n}",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 690,
        "y": 280,
        "wires": [
            [
                "30479ec43ba00bd3"
            ],
            [
                "491653a7af2fe87f"
            ]
        ],
        "outputLabels": [
            "ABORTED",
            "AVERAGE"
        ]
    },
    {
        "id": "4eaafb91979162e2",
        "type": "function",
        "z": "82a301b2b7fb01c3",
        "name": "Filter",
        "func": "let actualHum = msg.payload.main.humidity;\nlet actualTemp = msg.payload.main.temp;\n\nmsg = {\n    payload: {\n        actualTemperature: actualTemp,\n        actualHumidity: actualHum\n    },\n    complete: true\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 850,
        "y": 440,
        "wires": [
            [
                "491653a7af2fe87f"
            ]
        ]
    },
    {
        "id": "30479ec43ba00bd3",
        "type": "function",
        "z": "82a301b2b7fb01c3",
        "name": "Split",
        "func": "let msg1 = {\n    payload: {\n        predictedTemperature: msg.payload.predictedTemperature,\n        predictedHumidity: msg.payload.predictedHumidity\n    }\n};\n\nlet msg2 = {\n    payload: {\n        floor: msg.payload.floor,\n        apartment: msg.payload.apartment\n    }\n}\nreturn [msg1, msg2];",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 950,
        "y": 280,
        "wires": [
            [],
            []
        ],
        "outputLabels": [
            "Values",
            "Apartment"
        ],
        "icon": "node-red/split.svg"
    },
    {
        "id": "3d5faa34f9d56ffe",
        "type": "subflow",
        "name": "GET apartmentID",
        "info": "",
        "category": "",
        "in": [
            {
                "x": 80,
                "y": 160,
                "wires": [
                    {
                        "id": "0125b8bb673b0164"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 700,
                "y": 160,
                "wires": [
                    {
                        "id": "0125b8bb673b0164",
                        "port": 0
                    }
                ]
            },
            {
                "x": 690,
                "y": 220,
                "wires": [
                    {
                        "id": "343ec06f2ee7134b",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [],
        "meta": {},
        "color": "#F3B567",
        "outputLabels": [
            "ORIGINAL MESSAGE",
            "QUERY RESULT"
        ],
        "icon": "node-red/db.svg"
    },
    {
        "id": "0125b8bb673b0164",
        "type": "function",
        "z": "3d5faa34f9d56ffe",
        "name": "GET apartmentID",
        "func": "flow.set(msg.payload.chatId+\"_new_cond2\", msg.payload.content)\n\nmsg.topic= \"SELECT ApartmentId \"+\n           \"FROM user \"+\n           \"WHERE chatId='\"+msg.payload.chatId+\"'\";\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 250,
        "y": 160,
        "wires": [
            [
                "8182ee3e15bf230b"
            ]
        ]
    },
    {
        "id": "8182ee3e15bf230b",
        "type": "mysql",
        "z": "3d5faa34f9d56ffe",
        "mydb": "3d82484f23ccce80",
        "name": "Query",
        "x": 430,
        "y": 220,
        "wires": [
            [
                "343ec06f2ee7134b"
            ]
        ]
    },
    {
        "id": "343ec06f2ee7134b",
        "type": "change",
        "z": "3d5faa34f9d56ffe",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "payload.rooms",
                "pt": "msg",
                "to": "payload",
                "tot": "msg"
            },
            {
                "t": "set",
                "p": "complete",
                "pt": "msg",
                "to": "true",
                "tot": "bool"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 525,
        "y": 220,
        "wires": [
            []
        ],
        "l": false
    },
    {
        "id": "2791f50d50c4582a",
        "type": "subflow",
        "name": "GET user rooms",
        "info": "",
        "category": "",
        "in": [
            {
                "x": 140,
                "y": 200,
                "wires": [
                    {
                        "id": "d5a6b4a662868704"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 620,
                "y": 200,
                "wires": [
                    {
                        "id": "43d194113340ec98",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [],
        "meta": {},
        "color": "#F3B567",
        "icon": "node-red/db.svg"
    },
    {
        "id": "d5a6b4a662868704",
        "type": "function",
        "z": "2791f50d50c4582a",
        "name": "GET user rooms",
        "func": "msg.topic = \"SELECT DISTINCT sac.name \"+\n            \"FROM smartAirConditioner AS sac, user AS u \"\n            \"WHERE u.chatId = \"+msg.uid+\" \"+\n            \"AND u.apartmentID = sac.apartmentID\";\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 280,
        "y": 200,
        "wires": [
            [
                "694bd8e2527a77e2"
            ]
        ]
    },
    {
        "id": "694bd8e2527a77e2",
        "type": "mysql",
        "z": "2791f50d50c4582a",
        "mydb": "3d82484f23ccce80",
        "name": "Query",
        "x": 450,
        "y": 200,
        "wires": [
            [
                "43d194113340ec98"
            ]
        ]
    },
    {
        "id": "43d194113340ec98",
        "type": "change",
        "z": "2791f50d50c4582a",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "payload.rooms",
                "pt": "msg",
                "to": "payload",
                "tot": "msg"
            },
            {
                "t": "set",
                "p": "complete",
                "pt": "msg",
                "to": "true",
                "tot": "bool"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 545,
        "y": 200,
        "wires": [
            []
        ],
        "l": false
    },
    {
        "id": "8d9c66f631c2b957",
        "type": "tab",
        "label": "Slave - Handle Conditioner",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "179a96e6a2f230e2",
        "type": "comment",
        "z": "8d9c66f631c2b957",
        "name": "Add a new conditioner",
        "info": "",
        "x": 200,
        "y": 20,
        "wires": []
    },
    {
        "id": "41dbac499235c63e",
        "type": "comment",
        "z": "8d9c66f631c2b957",
        "name": "Remove an existing conditioner",
        "info": "",
        "x": 290,
        "y": 480,
        "wires": []
    },
    {
        "id": "aada96c04ab79004",
        "type": "comment",
        "z": "8d9c66f631c2b957",
        "name": "Activate/Deactivate an existing conditioner",
        "info": "",
        "x": 320,
        "y": 860,
        "wires": []
    },
    {
        "id": "35a9497df8f2d00e",
        "type": "function",
        "z": "8d9c66f631c2b957",
        "name": "Ask name",
        "func": "msg.payload = {\n    content: \"What is the name of the room?\",\n    type : \"message\",\n    chatId: msg.payload.chatId\n}\n//change status of FSM\nglobal.set(\"\"+msg.payload.chatId, \"new_cond1\");\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 420,
        "y": 60,
        "wires": [
            [
                "faf859c98ed70ce2"
            ]
        ]
    },
    {
        "id": "31a5b623230dfd81",
        "type": "function",
        "z": "8d9c66f631c2b957",
        "name": "filter",
        "func": "if(global.get(\"\"+msg.payload.chatId) === \"new_cond1\"){\n    return msg;\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 325,
        "y": 120,
        "wires": [
            [
                "2601136fb221b14b"
            ]
        ],
        "icon": "node-red/switch.svg",
        "l": false
    },
    {
        "id": "c1846747541e0cfa",
        "type": "switch",
        "z": "8d9c66f631c2b957",
        "name": "",
        "property": "payload.content",
        "propertyType": "msg",
        "rules": [
            {
                "t": "regex",
                "v": "^\\/[\\w]*",
                "vt": "str",
                "case": true
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 265,
        "y": 120,
        "wires": [
            [],
            [
                "31a5b623230dfd81"
            ]
        ],
        "outputLabels": [
            "It's a command",
            "It's a message"
        ],
        "l": false
    },
    {
        "id": "2601136fb221b14b",
        "type": "function",
        "z": "8d9c66f631c2b957",
        "name": "Ask DeviceID",
        "func": "//change status of FSM\nglobal.set(\"\"+msg.payload.chatId, \"new_cond2\");\n\nflow.set(msg.payload.chatId+\"_new_cond1\", msg.payload.content);\n\nmsg.payload = {\n    content: \"Set the device ID\",\n    type : \"message\",\n    chatId: msg.payload.chatId\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 440,
        "y": 120,
        "wires": [
            [
                "faf859c98ed70ce2"
            ]
        ]
    },
    {
        "id": "82b6f361a8fcc83f",
        "type": "function",
        "z": "8d9c66f631c2b957",
        "name": "INSERT Conditioner",
        "func": "if(msg.complete===undefined){\n    context.set(\"chatId\", msg.payload.chatId);\n    context.set(msg.payload.chatId+\"_new_cond2\", msg.payload.content)\n    node.done();\n}\nelse{\n    \n    let chatId = context.get(\"chatId\");\n    let roomName = flow.get(chatId+\"_new_cond1\");\n    let deviceID = context.get(chatId+\"_new_cond2\");\n    let apartmentID = msg.payload[0].ApartmentId;\n    \n    /*\n    let message = {\n        payload: \"\",\n        complete: true\n    };*/\n    \n    msg.topic = \"INSERT INTO smartAirConditioner (apartmentID,\"+\n                \"boardNumber, name, active, \"+\n                \"connected, ideal_temperature) \"+\n                \"VALUES(\"+apartmentID+\" , \"+ // apartmentID\n                deviceID+\" , '\"+ // deviceID\n                roomName+\"' , \"+ //roomName\n                1 +\" , \"+ //Active Flag\n                0 +\" , \"+ //connected\n                22+\");\"+ // Ideal Temperature\n                \"SELECT * FROM smartAirConditioner \"+\n                \"WHERE apartmentID = \"+apartmentID+\" \"+\n                \"AND boardNumber = \"+deviceID;\n    \n     \n    //reset status of FSM and of context\n    global.set(\"\"+chatId, \"\");\n    context.set(\"chatId\",\"\");\n    flow.set(chatId+\"_new_cond1\", \"\");\n    context.set(chatId+\"_new_cond2\", \"\");\n    \n    node.send(msg);\n    node.done();\n}\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 660,
        "y": 300,
        "wires": [
            [
                "0c73f173d9b7d9ed"
            ]
        ]
    },
    {
        "id": "a33ff70e24e0b95b",
        "type": "comment",
        "z": "8d9c66f631c2b957",
        "name": "Set ideal temperature",
        "info": "",
        "x": 260,
        "y": 1260,
        "wires": []
    },
    {
        "id": "0f02de34d4a65dc1",
        "type": "mqtt in",
        "z": "8d9c66f631c2b957",
        "name": "Cmd from Master",
        "topic": "cmd/slave/5/1/conditioner/add",
        "qos": "2",
        "datatype": "json",
        "broker": "54d52f8897b8d24f",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 160,
        "y": 60,
        "wires": [
            [
                "35a9497df8f2d00e"
            ]
        ]
    },
    {
        "id": "4476856bfd90cccf",
        "type": "mqtt in",
        "z": "8d9c66f631c2b957",
        "name": "Cmd from Master",
        "topic": "cmd/slave/5/1/conditioner/remove",
        "qos": "2",
        "datatype": "json",
        "broker": "54d52f8897b8d24f",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 160,
        "y": 520,
        "wires": [
            [
                "e6d616c57837134e",
                "7104deca10394374"
            ]
        ]
    },
    {
        "id": "4c1a873491eeeb02",
        "type": "mqtt in",
        "z": "8d9c66f631c2b957",
        "name": "Cmd from Master",
        "topic": "cmd/slave/5/1/conditioner/set",
        "qos": "2",
        "datatype": "json",
        "broker": "54d52f8897b8d24f",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 160,
        "y": 1300,
        "wires": [
            [
                "0f564d2637e0e6a7",
                "f5206f3c156c6c23"
            ]
        ]
    },
    {
        "id": "bea09269ee337245",
        "type": "function",
        "z": "8d9c66f631c2b957",
        "name": "filter",
        "func": "if(global.get(\"\"+msg.payload.chatId) === \"new_cond2\"){\n    return msg;\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 325,
        "y": 200,
        "wires": [
            [
                "803e08923a480980"
            ]
        ],
        "icon": "node-red/switch.svg",
        "l": false
    },
    {
        "id": "228e5cf0434d0c28",
        "type": "switch",
        "z": "8d9c66f631c2b957",
        "name": "",
        "property": "payload.content",
        "propertyType": "msg",
        "rules": [
            {
                "t": "regex",
                "v": "^\\/[\\w]*",
                "vt": "str",
                "case": true
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 265,
        "y": 200,
        "wires": [
            [],
            [
                "bea09269ee337245"
            ]
        ],
        "outputLabels": [
            "It's a command",
            "It's a message"
        ],
        "l": false
    },
    {
        "id": "0c73f173d9b7d9ed",
        "type": "mysql",
        "z": "8d9c66f631c2b957",
        "mydb": "3d82484f23ccce80",
        "name": "Execute1",
        "x": 840,
        "y": 300,
        "wires": [
            [
                "8750e267c90f7b99",
                "715ccd3d3c8775f5"
            ]
        ]
    },
    {
        "id": "e6d616c57837134e",
        "type": "function",
        "z": "8d9c66f631c2b957",
        "name": "Ask name",
        "func": "if(msg.complete === undefined){\n    context.set(\"telegramID\", msg.payload.chatId);\n    node.done();\n}\nelse{\n    let rooms = msg.payload.rooms;\n    msg.payload = {\n        content: \"What is the name of the room where is located \"+\n                 \"the conditioner you want to delete?\",\n        type : \"message\",\n        chatId: context.get(\"telegramID\")\n    }\n    \n    //Passiamo la lista delle stanze dell'utente come opzioni di\n    //risposta\n    let options = [];\n    for(let i = 0; i< rooms.length; i++){\n        options[i]=rooms[i].name;\n    }\n    msg.payload.options = options;\n    \n    //change status of FSM\n    global.set(\"\"+msg.payload.chatId, \"del_cond1\");\n    node.send(msg);\n    \n    let roomList = roomListAsString(rooms);\n    let msg2 = {\n        payload: {\n            content: roomList,\n            type: \"message\",\n            chatId: msg.payload.chatId\n        }\n    }\n    \n    //Wait for 0.5 seconds\n    await new Promise(r => setTimeout(r, 500));\n    \n    \n    node.send(msg2);\n    node.done();\n}\n\n\nfunction roomListAsString(rooms){\n    let result = \"Possible answers: \";\n    rooms.forEach(room => {\n        result += room.name+\", \"\n    })\n    return result.substring(0, result.length-1);\n}\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 560,
        "y": 520,
        "wires": [
            [
                "897bc2f7ee61386d"
            ]
        ]
    },
    {
        "id": "4acc6dbbb20369a2",
        "type": "function",
        "z": "8d9c66f631c2b957",
        "name": "filter",
        "func": "if(global.get(\"\"+msg.payload.chatId) === \"del_cond1\"){\n    return msg;\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 325,
        "y": 660,
        "wires": [
            [
                "c1e022b125ab8b8a",
                "48e5c7c70e5981a2"
            ]
        ],
        "icon": "node-red/switch.svg",
        "l": false
    },
    {
        "id": "cc1578aa41c681d2",
        "type": "switch",
        "z": "8d9c66f631c2b957",
        "name": "",
        "property": "payload.content",
        "propertyType": "msg",
        "rules": [
            {
                "t": "regex",
                "v": "^\\/[\\w]*",
                "vt": "str",
                "case": true
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 265,
        "y": 660,
        "wires": [
            [],
            [
                "4acc6dbbb20369a2"
            ]
        ],
        "outputLabels": [
            "It's a command",
            "It's a message"
        ],
        "l": false
    },
    {
        "id": "48e5c7c70e5981a2",
        "type": "function",
        "z": "8d9c66f631c2b957",
        "name": "DELETE query",
        "func": "if(msg.complete === undefined){\n    context.set(\"room\", msg.payload.content.trim());\n    context.set(\"chatId\", msg.payload.chatId);\n    node.done();\n}\nelse{\n    \n    let telegramId = context.get(\"chatId\");\n    let apartmentID = msg.payload[0].ApartmentId;\n    let room = context.get(\"room\");\n    \n    //let debugMsg = {\n    //    payload:telegramId\n    //}\n    //node.send([null, null, debugMsg]);\n    \n    let dataMsg = {\n        payload: {\n            chatId: telegramId\n        }\n    }\n    \n    //Reset status of FSM and context variables\n    global.set(\"\"+telegramId, \"\");\n    context.set(\"chatId\",\"\");\n    context.set(\"room\",\"\");\n    \n\n    \n    //CREATE THE QUERY\n    msg.topic = \"DELETE t FROM temperature AS t \"+\n                \"JOIN smartAirConditioner AS sac \"+\n                \"ON t.conditionerID = sac.ID \"+\n                \"WHERE sac.name = '\"+room+\"' \"+\n                \"AND sac.apartmentID = \"+apartmentID+\"; \"+ //temperature deletion\n                \"DELETE h FROM humidity AS h \"+\n                \"JOIN smartAirConditioner AS sac \"+\n                \"ON h.conditionerID = sac.ID \"+\n                \"WHERE sac.name = '\"+room+\"' \"+\n                \"AND sac.apartmentID = \"+apartmentID+\"; \"+ //humidity deletion\n                \"DELETE FROM smartAirConditioner \"+\n                \"WHERE name = '\"+room+\"' \"+\n                \"AND apartmentID = \"+apartmentID; //conditioner deletion\n            \n    \n    node.send([dataMsg, msg]);\n    node.done();\n}",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 660,
        "y": 660,
        "wires": [
            [
                "ed7713e32ebb30e9",
                "f5916e2e84721979"
            ],
            [
                "9b9594c3d714e095"
            ]
        ]
    },
    {
        "id": "9b9594c3d714e095",
        "type": "mysql",
        "z": "8d9c66f631c2b957",
        "mydb": "3d82484f23ccce80",
        "name": "Execute2",
        "x": 820,
        "y": 740,
        "wires": [
            [
                "ed7713e32ebb30e9"
            ]
        ]
    },
    {
        "id": "a1c4d3caf82f70eb",
        "type": "function",
        "z": "8d9c66f631c2b957",
        "name": "Ask name",
        "func": "if(msg.complete === undefined){\n    context.set(\"telegramID\", msg.payload.chatId);\n    node.done();\n}\nelse{\n    let rooms = msg.payload.rooms;\n    msg.payload = {\n        content: \"What is the name of the room where is located \"+\n                 \"the conditioner you want to activate/deactivate?\",\n        type : \"message\",\n        chatId: context.get(\"telegramID\")\n    }\n    \n    \n    //Passiamo la lista delle stanze dell'utente come opzioni di\n    //risposta\n    let options = [];\n    for(let i = 0; i< rooms.length; i++){\n        options[i]=rooms[i];\n    }\n    msg.payload.options = options;\n    \n    //change status of FSM\n    global.set(\"\"+msg.payload.chatId, \"toggle_cond1\");\n    \n    \n    node.send(msg);\n    \n    \n    let roomList = roomListAsString(rooms);\n    let msg2 = {\n        payload: {\n            content: roomList,\n            type: \"message\",\n            chatId: msg.payload.chatId\n        }\n    }\n    \n    //Wait for 0.5 seconds\n    await new Promise(r => setTimeout(r, 500));\n    \n    \n    node.send(msg2);\n    node.done();\n}\n\n\n\n\nfunction roomListAsString(rooms){\n    let result = \"Possible answers: \";\n    rooms.forEach(room => {\n        result += room.name+\", \"\n    })\n    return result.substring(0, result.length-1);\n}\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 560,
        "y": 900,
        "wires": [
            [
                "29d4ed6cde727017"
            ]
        ]
    },
    {
        "id": "fec751d908c304f6",
        "type": "function",
        "z": "8d9c66f631c2b957",
        "name": "filter",
        "func": "if(global.get(\"\"+msg.payload.chatId) === \"toggle_cond1\"){\n    return msg;\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 325,
        "y": 1000,
        "wires": [
            [
                "44c8ccfaea95cb09",
                "354174fce5121c3e"
            ]
        ],
        "icon": "node-red/switch.svg",
        "l": false
    },
    {
        "id": "954171826701977d",
        "type": "switch",
        "z": "8d9c66f631c2b957",
        "name": "",
        "property": "payload.content",
        "propertyType": "msg",
        "rules": [
            {
                "t": "regex",
                "v": "^\\/[\\w]*",
                "vt": "str",
                "case": true
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 265,
        "y": 1000,
        "wires": [
            [],
            [
                "fec751d908c304f6"
            ]
        ],
        "outputLabels": [
            "It's a command",
            "It's a message"
        ],
        "l": false
    },
    {
        "id": "44c8ccfaea95cb09",
        "type": "function",
        "z": "8d9c66f631c2b957",
        "name": "UPDATE query",
        "func": "if(msg.complete === undefined){\n    context.set(\"telegramID\", msg.payload.chatId);\n    context.set(\"room\", msg.payload.content);\n    node.done();\n}\nelse{\n    let apartmentID = msg.payload[0].ApartmentId;\n    let room = context.get(\"room\");\n    let telegramID = context.get(\"telegramID\");\n    \n    \n    //CREATE THE QUERY\n    msg.payload = {\n        chatId: telegramID\n    }\n    msg.topic = \"UPDATE smartAirConditioner \"+\n                \"SET active = active^1 \"+\n                \"WHERE name = '\"+room+\"' \"+\n                \"AND apartmentID = \"+apartmentID+\"; \"+\n                \"SELECT active FROM smartAirConditioner \"+\n                \"WHERE name = '\"+room+\"' \"+\n                \"AND apartmentID = \"+apartmentID;\n    \n    //RESET THE STATUS OF FSM\n    global.set(\"\"+telegramID, \"\");\n    \n    //Send the query\n    node.send(msg);\n    node.done();\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 660,
        "y": 980,
        "wires": [
            [
                "cb12a4ab5e34aec0",
                "d290a80c8d6bf966"
            ]
        ]
    },
    {
        "id": "cb12a4ab5e34aec0",
        "type": "mysql",
        "z": "8d9c66f631c2b957",
        "mydb": "3d82484f23ccce80",
        "name": "Execute",
        "x": 820,
        "y": 1040,
        "wires": [
            [
                "aa4575380006caa3"
            ]
        ]
    },
    {
        "id": "0f564d2637e0e6a7",
        "type": "function",
        "z": "8d9c66f631c2b957",
        "name": "Ask name",
        "func": "if(msg.complete === undefined){\n    context.set(\"telegramID\", msg.payload.chatId);\n    node.done();\n}\nelse{\n    let rooms = msg.payload.rooms;\n    msg.payload = {\n        content: \"What is the name of the room where is located \"+\n                 \"the conditioner you want to set?\",\n        type : \"message\",\n        chatId: context.get(\"telegramID\")\n    }\n    \n    \n    //Passiamo la lista delle stanze dell'utente come opzioni di\n    //risposta\n    let options = [];\n    for(let i = 0; i< rooms.length; i++){\n        options[i]=rooms[i];\n    }\n    msg.payload.options = options;\n    \n    //change status of FSM\n    global.set(\"\"+msg.payload.chatId, \"temp_cond1\");\n    \n    \n    node.send(msg);\n    \n    \n    let roomList = roomListAsString(rooms);\n    let msg2 = {\n        payload: {\n            content: roomList,\n            type: \"message\",\n            chatId: msg.payload.chatId\n        }\n    }\n    \n    //Wait for 0.5 seconds\n    await new Promise(r => setTimeout(r, 500));\n    \n    \n    node.send(msg2);\n    \n    node.done();\n}\n\n\n\nfunction roomListAsString(rooms){\n    let result = \"Possible answers: \";\n    rooms.forEach(room => {\n        result += room.name+\", \"\n    })\n    return result.substring(0, result.length-1);\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 560,
        "y": 1300,
        "wires": [
            [
                "32cba93d4eb14538"
            ]
        ]
    },
    {
        "id": "a1b17fd44de91807",
        "type": "function",
        "z": "8d9c66f631c2b957",
        "name": "filter",
        "func": "if(global.get(\"\"+msg.payload.chatId) === \"temp_cond1\"){\n    return msg;\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 325,
        "y": 1400,
        "wires": [
            [
                "2749f34f13d8874d"
            ]
        ],
        "icon": "node-red/switch.svg",
        "l": false
    },
    {
        "id": "64c6c98415ed8288",
        "type": "switch",
        "z": "8d9c66f631c2b957",
        "name": "",
        "property": "payload.content",
        "propertyType": "msg",
        "rules": [
            {
                "t": "regex",
                "v": "^\\/[\\w]*",
                "vt": "str",
                "case": true
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 265,
        "y": 1400,
        "wires": [
            [],
            [
                "a1b17fd44de91807"
            ]
        ],
        "outputLabels": [
            "It's a command",
            "It's a message"
        ],
        "l": false
    },
    {
        "id": "769098467fa01e7a",
        "type": "function",
        "z": "8d9c66f631c2b957",
        "name": "UPDATE query",
        "func": "if(msg.complete === undefined){\n    context.set(\"telegramID\", msg.payload.chatId);\n    context.set(\"temperature\", msg.payload.content);\n    node.done();\n}\nelse{\n    let telegramID = context.get(\"telegramID\");\n    let apartmentID = msg.payload[0].ApartmentId;\n    let room = flow.get(telegramID+\"_set_cond1\");\n    let temperature = context.get(\"temperature\");\n\n    \n    let fahr = convertToFahrenheit(temperature);\n    //CREATE THE QUERY\n    msg.payload = {\n        chatId: telegramID\n    }\n    msg.topic = \"UPDATE smartAirConditioner \"+\n            \"SET ideal_temperature = \"+fahr+\" \"+\n            \"WHERE name = '\"+room+\"' \"+\n            \"AND apartmentID = \"+apartmentID;\n    \n    //RESET THE STATUS OF FSM and context and flow variables\n    global.set(\"\"+telegramID, \"\");\n    context.set(\"telegramID\", \"\");\n    context.set(\"temperature\", \"\");\n    flow.set(telegramID+\"_set_cond1\", \"\")\n    \n    //Send the query\n    node.send(msg);\n    node.done();\n}\n\n\nfunction convertToFahrenheit(celsius){\n    return (celsius * 1.8) + 32.0;\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 660,
        "y": 1460,
        "wires": [
            [
                "320db3a5ff2e9531",
                "8bbe9421e08abd23"
            ]
        ]
    },
    {
        "id": "2749f34f13d8874d",
        "type": "function",
        "z": "8d9c66f631c2b957",
        "name": "Ask Temperature",
        "func": "flow.set(msg.payload.chatId+\"_set_cond1\", msg.payload.content);\n\nmsg.payload = {\n    content: \"What is the temperature (in Celsius) that you want to set in this room?\",\n    type : \"message\",\n    chatId: msg.payload.chatId\n}\n\n//change status of FSM\nglobal.set(\"\"+msg.payload.chatId, \"temp_cond2\");\n\nreturn msg;\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 470,
        "y": 1400,
        "wires": [
            [
                "32cba93d4eb14538"
            ]
        ]
    },
    {
        "id": "24be313a4be22d26",
        "type": "function",
        "z": "8d9c66f631c2b957",
        "name": "filter",
        "func": "if(global.get(\"\"+msg.payload.chatId) === \"temp_cond2\"){\n    return msg;\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 325,
        "y": 1460,
        "wires": [
            [
                "769098467fa01e7a",
                "7570da1d115f3c59"
            ]
        ],
        "icon": "node-red/switch.svg",
        "l": false
    },
    {
        "id": "22a99cce102931f6",
        "type": "switch",
        "z": "8d9c66f631c2b957",
        "name": "",
        "property": "payload.content",
        "propertyType": "msg",
        "rules": [
            {
                "t": "regex",
                "v": "^\\/[\\w]*",
                "vt": "str",
                "case": true
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 265,
        "y": 1460,
        "wires": [
            [],
            [
                "24be313a4be22d26"
            ]
        ],
        "outputLabels": [
            "It's a command",
            "It's a message"
        ],
        "l": false
    },
    {
        "id": "320db3a5ff2e9531",
        "type": "mysql",
        "z": "8d9c66f631c2b957",
        "mydb": "3d82484f23ccce80",
        "name": "Execute",
        "x": 820,
        "y": 1520,
        "wires": [
            [
                "7f2bd7f9ddb6ac3b"
            ]
        ]
    },
    {
        "id": "faf859c98ed70ce2",
        "type": "mqtt out",
        "z": "8d9c66f631c2b957",
        "name": "Send to Telegram",
        "topic": "cmd/master/telegram/send",
        "qos": "2",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "54d52f8897b8d24f",
        "x": 670,
        "y": 60,
        "wires": []
    },
    {
        "id": "c99be09455d8f00b",
        "type": "mqtt in",
        "z": "8d9c66f631c2b957",
        "name": "Receive from Telegram",
        "topic": "cmd/slave/5/1/telegram/receive",
        "qos": "2",
        "datatype": "json",
        "broker": "54d52f8897b8d24f",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 120,
        "y": 120,
        "wires": [
            [
                "c1846747541e0cfa"
            ]
        ]
    },
    {
        "id": "577a8007c81a2c05",
        "type": "mqtt in",
        "z": "8d9c66f631c2b957",
        "name": "Receive from Telegram",
        "topic": "cmd/slave/5/1/telegram/receive",
        "qos": "2",
        "datatype": "json",
        "broker": "54d52f8897b8d24f",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 120,
        "y": 200,
        "wires": [
            [
                "228e5cf0434d0c28"
            ]
        ]
    },
    {
        "id": "897bc2f7ee61386d",
        "type": "mqtt out",
        "z": "8d9c66f631c2b957",
        "name": "Send to Telegram",
        "topic": "cmd/master/telegram/send",
        "qos": "2",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "54d52f8897b8d24f",
        "x": 750,
        "y": 520,
        "wires": []
    },
    {
        "id": "c9592d168279b4d7",
        "type": "mqtt in",
        "z": "8d9c66f631c2b957",
        "name": "Receive from Telegram",
        "topic": "cmd/slave/5/1/telegram/receive",
        "qos": "2",
        "datatype": "json",
        "broker": "54d52f8897b8d24f",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 120,
        "y": 660,
        "wires": [
            [
                "cc1578aa41c681d2"
            ]
        ]
    },
    {
        "id": "eff0f8e7cf717c32",
        "type": "mqtt in",
        "z": "8d9c66f631c2b957",
        "name": "Receive from Telegram",
        "topic": "cmd/slave/5/1/telegram/receive",
        "qos": "2",
        "datatype": "json",
        "broker": "54d52f8897b8d24f",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 120,
        "y": 1000,
        "wires": [
            [
                "954171826701977d"
            ]
        ]
    },
    {
        "id": "29d4ed6cde727017",
        "type": "mqtt out",
        "z": "8d9c66f631c2b957",
        "name": "Send to Telegram",
        "topic": "cmd/master/telegram/send",
        "qos": "2",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "54d52f8897b8d24f",
        "x": 1170,
        "y": 900,
        "wires": []
    },
    {
        "id": "8c1a78f83df70875",
        "type": "mqtt in",
        "z": "8d9c66f631c2b957",
        "name": "Receive from Telegram",
        "topic": "cmd/slave/5/1/telegram/receive",
        "qos": "2",
        "datatype": "json",
        "broker": "54d52f8897b8d24f",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 120,
        "y": 1400,
        "wires": [
            [
                "64c6c98415ed8288"
            ]
        ]
    },
    {
        "id": "063653602043aecc",
        "type": "mqtt in",
        "z": "8d9c66f631c2b957",
        "name": "Receive from Telegram",
        "topic": "cmd/slave/5/1/telegram/receive",
        "qos": "2",
        "datatype": "json",
        "broker": "54d52f8897b8d24f",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 120,
        "y": 1460,
        "wires": [
            [
                "22a99cce102931f6"
            ]
        ]
    },
    {
        "id": "32cba93d4eb14538",
        "type": "mqtt out",
        "z": "8d9c66f631c2b957",
        "name": "Send to Telegram",
        "topic": "cmd/master/telegram/send",
        "qos": "2",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "54d52f8897b8d24f",
        "x": 1110,
        "y": 1300,
        "wires": []
    },
    {
        "id": "38d2655c5bbe7b06",
        "type": "mqtt in",
        "z": "8d9c66f631c2b957",
        "name": "Cmd from Master",
        "topic": "cmd/slave/5/1/conditioner/toggle",
        "qos": "2",
        "datatype": "json",
        "broker": "54d52f8897b8d24f",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 160,
        "y": 900,
        "wires": [
            [
                "a1c4d3caf82f70eb",
                "4e797a1264672d48"
            ]
        ]
    },
    {
        "id": "7104deca10394374",
        "type": "subflow:2791f50d50c4582a",
        "z": "8d9c66f631c2b957",
        "name": "",
        "x": 360,
        "y": 560,
        "wires": [
            [
                "e6d616c57837134e"
            ]
        ]
    },
    {
        "id": "4e797a1264672d48",
        "type": "subflow:2791f50d50c4582a",
        "z": "8d9c66f631c2b957",
        "name": "",
        "x": 360,
        "y": 940,
        "wires": [
            [
                "a1c4d3caf82f70eb"
            ]
        ]
    },
    {
        "id": "f5206f3c156c6c23",
        "type": "subflow:2791f50d50c4582a",
        "z": "8d9c66f631c2b957",
        "name": "",
        "x": 360,
        "y": 1340,
        "wires": [
            [
                "0f564d2637e0e6a7"
            ]
        ]
    },
    {
        "id": "803e08923a480980",
        "type": "subflow:3d5faa34f9d56ffe",
        "z": "8d9c66f631c2b957",
        "name": "",
        "x": 450,
        "y": 200,
        "wires": [
            [
                "82b6f361a8fcc83f",
                "85251710f2f786b4",
                "2475c03094f97131"
            ],
            [
                "82b6f361a8fcc83f"
            ]
        ]
    },
    {
        "id": "c1e022b125ab8b8a",
        "type": "subflow:3d5faa34f9d56ffe",
        "z": "8d9c66f631c2b957",
        "name": "",
        "x": 460,
        "y": 700,
        "wires": [
            [],
            [
                "48e5c7c70e5981a2"
            ]
        ]
    },
    {
        "id": "354174fce5121c3e",
        "type": "subflow:3d5faa34f9d56ffe",
        "z": "8d9c66f631c2b957",
        "name": "",
        "x": 440,
        "y": 1040,
        "wires": [
            [],
            [
                "44c8ccfaea95cb09"
            ]
        ]
    },
    {
        "id": "7570da1d115f3c59",
        "type": "subflow:3d5faa34f9d56ffe",
        "z": "8d9c66f631c2b957",
        "name": "",
        "x": 460,
        "y": 1500,
        "wires": [
            [],
            [
                "769098467fa01e7a"
            ]
        ]
    },
    {
        "id": "8750e267c90f7b99",
        "type": "function",
        "z": "8d9c66f631c2b957",
        "name": "Add fake data",
        "func": "\nlet conditionerID = msg.payload[1][0].ID;\n\nmsg.topic = \"INSERT INTO temperature (conditionerID, year, month, \"+\n            \"day, hour, minute, second, recent_temperature, \"+\n            \"recent_humidity, target_temperature) VALUES (\"+\n            conditionerID+\", 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)\";\nnode.send(msg);\n\nmsg.topic = \"INSERT INTO humidity (conditionerID, year, month, \"+\n            \"day, hour, minute, second, recent_temperature, \"+\n            \"recent_humidity, target_humidity) VALUES (\"+\n            conditionerID+\", 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)\";\nnode.send(msg);\nnode.done();",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1000,
        "y": 340,
        "wires": [
            [
                "0d3d4b597188da7b"
            ]
        ]
    },
    {
        "id": "0d3d4b597188da7b",
        "type": "mysql",
        "z": "8d9c66f631c2b957",
        "mydb": "3d82484f23ccce80",
        "name": "Execute",
        "x": 1160,
        "y": 340,
        "wires": [
            []
        ]
    },
    {
        "id": "715ccd3d3c8775f5",
        "type": "change",
        "z": "8d9c66f631c2b957",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "complete",
                "pt": "msg",
                "to": "true",
                "tot": "bool"
            },
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 935,
        "y": 280,
        "wires": [
            [
                "85251710f2f786b4"
            ]
        ],
        "l": false
    },
    {
        "id": "f22cb208b3506807",
        "type": "catch",
        "z": "8d9c66f631c2b957",
        "name": "Error 1",
        "scope": [
            "0c73f173d9b7d9ed"
        ],
        "uncaught": false,
        "x": 650,
        "y": 120,
        "wires": [
            [
                "999038a408b8625f"
            ]
        ]
    },
    {
        "id": "2475c03094f97131",
        "type": "function",
        "z": "8d9c66f631c2b957",
        "name": "Bad Answer",
        "func": "if(msg.complete === undefined){\n    context.set('telegramId', msg.payload.chatId)\n    node.done();\n}\nelse{\n    msg.payload = {\n        content: \"Error during insertion\",\n        type: \"message\",\n        chatId: context.get('telegramId')\n    }\n    context.set('telegramId', '');\n    \n    //Reset the FSM\n    global.set(\"\"+msg.payload.chatId,\"\");\n    \n    node.send(msg);\n    node.done();\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 910,
        "y": 120,
        "wires": [
            [
                "fa2a2d7fd38b6731"
            ]
        ]
    },
    {
        "id": "fa2a2d7fd38b6731",
        "type": "mqtt out",
        "z": "8d9c66f631c2b957",
        "name": "Send to Telegram",
        "topic": "cmd/master/telegram/send",
        "qos": "2",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "54d52f8897b8d24f",
        "x": 1150,
        "y": 160,
        "wires": []
    },
    {
        "id": "85251710f2f786b4",
        "type": "function",
        "z": "8d9c66f631c2b957",
        "name": "Good Answer",
        "func": "if(msg.complete === undefined){\n    context.set('telegramId', msg.payload.chatId)\n    node.done();\n}\nelse{\n    msg.payload = {\n        content: \"New conditioner added\",\n        type: \"message\",\n        chatId: context.get('telegramId')\n    }\n    context.set('telegramId', '');\n    \n    //Reset the FSM\n    global.set(\"\"+msg.payload.chatId,\"\");\n    \n    node.send(msg);\n    node.done();\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 920,
        "y": 200,
        "wires": [
            [
                "fa2a2d7fd38b6731"
            ]
        ]
    },
    {
        "id": "999038a408b8625f",
        "type": "change",
        "z": "8d9c66f631c2b957",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "complete",
                "pt": "msg",
                "to": "true",
                "tot": "bool"
            },
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 745,
        "y": 120,
        "wires": [
            [
                "2475c03094f97131"
            ]
        ],
        "l": false
    },
    {
        "id": "ed7713e32ebb30e9",
        "type": "function",
        "z": "8d9c66f631c2b957",
        "name": "Good answer",
        "func": "//CREATE THE MESSAGE FOR THE USER\n\nif(msg.complete === undefined){\n    context.set('telegramId', msg.payload.chatId)\n    node.done();\n}\nelse{\n    let telegramId = context.get('telegramId')\n    let result = msg.payload[2].affectedRows > 0;\n    if(result){\n        msg.payload = {\n            content: \"Conditioner deleted!\",\n            type: \"message\",\n            chatId: telegramId\n        }\n    }\n    else{\n        msg.payload = {\n            content: \"Conditioner not found!\",\n            type: \"message\",\n            chatId: telegramId\n        }\n    }\n    \n    context.set('telegramId', '');\n    \n    //Reset the FSM\n    global.set(\"\"+msg.payload.chatId,\"\");\n    \n    node.send(msg);\n    node.done();\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1010,
        "y": 700,
        "wires": [
            [
                "55a85e475ac72f70"
            ]
        ]
    },
    {
        "id": "04d5e5014aa9f93c",
        "type": "catch",
        "z": "8d9c66f631c2b957",
        "name": "Error 2",
        "scope": [
            "9b9594c3d714e095"
        ],
        "uncaught": false,
        "x": 770,
        "y": 600,
        "wires": [
            [
                "944e1c6c23a2c48a"
            ]
        ]
    },
    {
        "id": "944e1c6c23a2c48a",
        "type": "change",
        "z": "8d9c66f631c2b957",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "complete",
                "pt": "msg",
                "to": "true",
                "tot": "bool"
            },
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 865,
        "y": 600,
        "wires": [
            [
                "f5916e2e84721979"
            ]
        ],
        "l": false
    },
    {
        "id": "f5916e2e84721979",
        "type": "function",
        "z": "8d9c66f631c2b957",
        "name": "Bad answer",
        "func": "if(msg.complete === undefined){\n    context.set('telegramId', msg.payload.chatId)\n    node.done();\n}\nelse{\n    msg.payload = {\n        content: \"Error during deletion!\",\n        type: \"message\",\n        chatId: context.get('telegramId')\n    }\n    context.set('telegramId', '');\n    \n    //Reset the FSM\n    global.set(\"\"+msg.payload.chatId,\"\");\n    \n    node.send(msg);\n    node.done();\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1010,
        "y": 640,
        "wires": [
            [
                "55a85e475ac72f70"
            ]
        ]
    },
    {
        "id": "55a85e475ac72f70",
        "type": "mqtt out",
        "z": "8d9c66f631c2b957",
        "name": "Send to Telegram",
        "topic": "cmd/master/telegram/send",
        "qos": "2",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "54d52f8897b8d24f",
        "x": 1210,
        "y": 660,
        "wires": []
    },
    {
        "id": "472c91f9f911c9d8",
        "type": "function",
        "z": "8d9c66f631c2b957",
        "name": "Answer",
        "func": "//CREATE THE MESSAGE FOR THE USER\n\nif(msg.complete === undefined){\n    context.set('telegramId', msg.payload.chatId)\n    node.done();\n}\nelse{\n    let telegramId = context.get('telegramId')\n    let result = msg.payload[0].changedRows > 0;\n    if(result){\n        let active = msg.payload[1][0].active[0];\n        node.send([null,{payload: active}])\n        if(active){\n            //Condizionatore attivato\n            msg.payload = {\n                content: \"Conditioner activated!\",\n                type: \"message\",\n                chatId: telegramId\n            }\n        }\n        else{\n            //Condizionatore disattivato\n            msg.payload = {\n                content: \"Conditioner deactivated!\",\n                type: \"message\",\n                chatId: telegramId\n            }\n        }\n    }\n    else{\n        //Condizionatore non trovato\n        msg.payload = {\n            content: \"Conditioner not found!\",\n            type: \"message\",\n            chatId: telegramId\n        }\n    }\n    \n    context.set('telegramId', '');\n    \n    //Reset the FSM\n    global.set(\"\"+msg.payload.chatId,\"\");\n    \n    node.send([msg, msg]);\n    node.done();\n}",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1000,
        "y": 980,
        "wires": [
            [
                "29d4ed6cde727017"
            ],
            []
        ],
        "outputLabels": [
            "",
            "DEBUG"
        ]
    },
    {
        "id": "aa4575380006caa3",
        "type": "change",
        "z": "8d9c66f631c2b957",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "complete",
                "pt": "msg",
                "to": "true",
                "tot": "bool"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 915,
        "y": 1040,
        "wires": [
            [
                "472c91f9f911c9d8"
            ]
        ],
        "l": false
    },
    {
        "id": "d290a80c8d6bf966",
        "type": "change",
        "z": "8d9c66f631c2b957",
        "name": "",
        "rules": [
            {
                "t": "delete",
                "p": "complete",
                "pt": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 805,
        "y": 980,
        "wires": [
            [
                "472c91f9f911c9d8"
            ]
        ],
        "l": false
    },
    {
        "id": "8bbe9421e08abd23",
        "type": "change",
        "z": "8d9c66f631c2b957",
        "name": "",
        "rules": [
            {
                "t": "delete",
                "p": "complete",
                "pt": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 795,
        "y": 1460,
        "wires": [
            [
                "95987be8ab037569"
            ]
        ],
        "l": false
    },
    {
        "id": "95987be8ab037569",
        "type": "function",
        "z": "8d9c66f631c2b957",
        "name": "Answer",
        "func": "//CREATE THE MESSAGE FOR THE USER\n\nif(msg.complete === undefined){\n    context.set('telegramId', msg.payload.chatId)\n    node.done();\n}\nelse{\n    let telegramId = context.get('telegramId')\n    let jsonObj = JSON.parse(msg.payload);\n    node.send([null, {payload: jsonObj}]);\n    let result = jsonObj.changedRows > 0;\n    if(result){\n        msg.payload = {\n            content: \"Temperature changed!\",\n            type: \"message\",\n            chatId: telegramId\n        }\n    }\n    else{\n        //Condizionatore non trovato\n        msg.payload = {\n            content: \"Conditioner not found!\",\n            type: \"message\",\n            chatId: telegramId\n        }\n    }\n    \n    context.set('telegramId', '');\n    \n    //Reset the FSM\n    global.set(\"\"+msg.payload.chatId,\"\");\n    \n    node.send([msg, msg]);\n    node.done();\n}",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1040,
        "y": 1460,
        "wires": [
            [
                "32cba93d4eb14538"
            ],
            []
        ],
        "outputLabels": [
            "",
            "DEBUG"
        ]
    },
    {
        "id": "7f2bd7f9ddb6ac3b",
        "type": "change",
        "z": "8d9c66f631c2b957",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "complete",
                "pt": "msg",
                "to": "true",
                "tot": "bool"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 915,
        "y": 1520,
        "wires": [
            [
                "56fb0e28d03d1c49"
            ]
        ],
        "l": false
    },
    {
        "id": "56fb0e28d03d1c49",
        "type": "json",
        "z": "8d9c66f631c2b957",
        "name": "",
        "property": "payload",
        "action": "",
        "pretty": false,
        "x": 990,
        "y": 1520,
        "wires": [
            [
                "95987be8ab037569"
            ]
        ]
    },
    {
        "id": "ab64c76d4b245fdb",
        "type": "tab",
        "label": "Slave - Update",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "f55a99540ae26375",
        "type": "mqtt in",
        "z": "ab64c76d4b245fdb",
        "name": "Receive command from master",
        "topic": "cmd/slave/5/1/update",
        "qos": "2",
        "datatype": "auto",
        "broker": "54d52f8897b8d24f",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 190,
        "y": 240,
        "wires": [
            [
                "08f45432bac83d67"
            ]
        ]
    },
    {
        "id": "7e58fe774fb4547d",
        "type": "mqtt in",
        "z": "ab64c76d4b245fdb",
        "name": "Receive from boards",
        "topic": "data/esp32/5/1/+/#",
        "qos": "0",
        "datatype": "json",
        "broker": "54d52f8897b8d24f",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 210,
        "y": 460,
        "wires": [
            [
                "03b492e3ccc323d6"
            ]
        ]
    },
    {
        "id": "531c05bc1eb77e5f",
        "type": "mqtt in",
        "z": "ab64c76d4b245fdb",
        "name": "Receive from TensorFlow",
        "topic": "data/tensor/5/1",
        "qos": "0",
        "datatype": "json",
        "broker": "54d52f8897b8d24f",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 230,
        "y": 520,
        "wires": [
            [
                "9bd35805a4557720",
                "e170db2407e171f8"
            ]
        ]
    },
    {
        "id": "c83c6a9c9f009853",
        "type": "mqtt out",
        "z": "ab64c76d4b245fdb",
        "name": "Send to boards",
        "topic": "",
        "qos": "0",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "54d52f8897b8d24f",
        "x": 1020,
        "y": 200,
        "wires": []
    },
    {
        "id": "9bd35805a4557720",
        "type": "subflow:82a301b2b7fb01c3",
        "z": "ab64c76d4b245fdb",
        "name": "",
        "x": 520,
        "y": 520,
        "wires": [
            [
                "54d91e5b75e2603c"
            ]
        ]
    },
    {
        "id": "e52c67e0fd092626",
        "type": "inject",
        "z": "ab64c76d4b245fdb",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 200,
        "y": 600,
        "wires": [
            [
                "8a9760949d3ee0c6"
            ]
        ]
    },
    {
        "id": "8a9760949d3ee0c6",
        "type": "function",
        "z": "ab64c76d4b245fdb",
        "name": "Test tensorflow",
        "func": "let msg1 = {\n    topic: \"data/tensor/5/1\",\n    payload: {\n        predictedTemperature: 64.0,\n        predictedHumidity: 47.0\n    }\n}\nreturn msg1;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 360,
        "y": 600,
        "wires": [
            [
                "9bd35805a4557720"
            ]
        ]
    },
    {
        "id": "08f45432bac83d67",
        "type": "subflow:6a818e5b5d7c88ac",
        "z": "ab64c76d4b245fdb",
        "name": "",
        "x": 470,
        "y": 240,
        "wires": [
            [
                "b1f7857b913c508e"
            ],
            [
                "fb843936cfa0fafa"
            ]
        ]
    },
    {
        "id": "b1f7857b913c508e",
        "type": "function",
        "z": "ab64c76d4b245fdb",
        "name": "Send commands for each device",
        "func": "let devicesList = msg.payload;\n\ndevicesList.forEach(device => {\n    let apNumber = device.apartment_number;\n    let floor = device.floor;\n    let devID = device.boardNumber;\n    let OMA_temp = 3303;\n    let OMA_hum = 3304;\n    \n    msg.payload = \" \";\n    msg.topic = `cmd/esp32/${floor}/${apNumber}/${devID}/${OMA_temp}/0/5700`;\n    node.send(msg);\n    msg.topic = `cmd/esp32/${floor}/${apNumber}/${devID}/${OMA_hum}/0/5700`;\n    node.send(msg);\n});\nnode.done();",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 760,
        "y": 200,
        "wires": [
            [
                "c83c6a9c9f009853"
            ]
        ]
    },
    {
        "id": "4bf9fd09e7230167",
        "type": "comment",
        "z": "ab64c76d4b245fdb",
        "name": "Receive command",
        "info": "",
        "x": 150,
        "y": 180,
        "wires": []
    },
    {
        "id": "42fd7284995a7e2b",
        "type": "comment",
        "z": "ab64c76d4b245fdb",
        "name": "Receive data",
        "info": "",
        "x": 130,
        "y": 400,
        "wires": []
    },
    {
        "id": "03b492e3ccc323d6",
        "type": "subflow:619727cf4484ac7c",
        "z": "ab64c76d4b245fdb",
        "name": "",
        "x": 770,
        "y": 460,
        "wires": [
            [
                "506456665f4ad48a",
                "c6abe6efc8c43bab"
            ]
        ]
    },
    {
        "id": "506456665f4ad48a",
        "type": "subflow:20ed0c1f2d52531b",
        "z": "ab64c76d4b245fdb",
        "name": "",
        "x": 1130,
        "y": 500,
        "wires": []
    },
    {
        "id": "54d91e5b75e2603c",
        "type": "subflow:0e60f7bd99c4789e",
        "z": "ab64c76d4b245fdb",
        "name": "",
        "x": 830,
        "y": 520,
        "wires": [
            [
                "506456665f4ad48a",
                "c6abe6efc8c43bab"
            ]
        ]
    },
    {
        "id": "c6abe6efc8c43bab",
        "type": "subflow:b759bc5bafe40a88",
        "z": "ab64c76d4b245fdb",
        "name": "",
        "x": 1100,
        "y": 420,
        "wires": []
    },
    {
        "id": "fb843936cfa0fafa",
        "type": "exec",
        "z": "ab64c76d4b245fdb",
        "command": "/home/pi/Desktop/DockerStartingScript.sh",
        "addpay": "",
        "append": "",
        "useSpawn": "false",
        "timer": "",
        "winHide": false,
        "oldrc": false,
        "name": "Activate Docker ",
        "x": 760,
        "y": 300,
        "wires": [
            [],
            [
                "709cb2a1dd05ab6a"
            ],
            []
        ]
    },
    {
        "id": "e170db2407e171f8",
        "type": "debug",
        "z": "ab64c76d4b245fdb",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 460,
        "y": 420,
        "wires": []
    },
    {
        "id": "b71a7f69c3e8f5df",
        "type": "inject",
        "z": "ab64c76d4b245fdb",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 530,
        "y": 320,
        "wires": [
            [
                "fb843936cfa0fafa"
            ]
        ]
    },
    {
        "id": "fa11ed190ff03093",
        "type": "catch",
        "z": "ab64c76d4b245fdb",
        "name": "",
        "scope": [
            "fb843936cfa0fafa"
        ],
        "uncaught": false,
        "x": 780,
        "y": 380,
        "wires": [
            [
                "709cb2a1dd05ab6a"
            ]
        ]
    },
    {
        "id": "709cb2a1dd05ab6a",
        "type": "debug",
        "z": "ab64c76d4b245fdb",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1000,
        "y": 300,
        "wires": []
    },
    {
        "id": "b6b5a8360e1f176b",
        "type": "tab",
        "label": "Slave - Dead Board",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "74948a325b8e339e",
        "type": "mqtt in",
        "z": "b6b5a8360e1f176b",
        "name": "LWT from Board",
        "topic": "resp/esp32/5/1/+/3/0/4",
        "qos": "0",
        "datatype": "json",
        "broker": "54d52f8897b8d24f",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 180,
        "y": 260,
        "wires": [
            [
                "63d52cd7eb5963ae",
                "38eaed02328877fd"
            ]
        ]
    },
    {
        "id": "63d52cd7eb5963ae",
        "type": "function",
        "z": "b6b5a8360e1f176b",
        "name": "Split and GET conditioner",
        "func": "let topicParts = msg.topic.split('/');\nlet floor = topicParts[2];\nlet apartment = topicParts[3];\nlet devID = topicParts[4];\n\nlet status = msg.payload.v;\n\n\nlet query = {\n    topic: \"SELECT * FROM smartAirConditioner AS sac \"+\n            \"JOIN apartment AS ap \"+\n            \"ON sac.apartmentID = ap.apartmentID \"+\n            \"WHERE ap.apartment_number = \"+apartment+\" \"+\n            \"AND ap.floor = \"+floor+\" \"+\n            \"AND sac.boardNumber = \"+devID\n}\n\nif(status === \"Online\"){\n    return [query, null]\n}\nelse {\n    return [null, query]\n}",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 410,
        "y": 260,
        "wires": [
            [
                "4cba8f32515bf10d"
            ],
            [
                "63dec997d9f8dbdb"
            ]
        ],
        "outputLabels": [
            "ONLINE",
            "OFFLINE"
        ]
    },
    {
        "id": "63dec997d9f8dbdb",
        "type": "mysql",
        "z": "b6b5a8360e1f176b",
        "mydb": "3d82484f23ccce80",
        "name": "Query",
        "x": 590,
        "y": 300,
        "wires": [
            [
                "aaed698512f936c5"
            ]
        ]
    },
    {
        "id": "4cba8f32515bf10d",
        "type": "mysql",
        "z": "b6b5a8360e1f176b",
        "mydb": "3d82484f23ccce80",
        "name": "Query",
        "x": 590,
        "y": 220,
        "wires": [
            [
                "0e9540973eb90af8"
            ]
        ]
    },
    {
        "id": "0e9540973eb90af8",
        "type": "function",
        "z": "b6b5a8360e1f176b",
        "name": "Set Online",
        "func": "let conditionerID = msg.payload[0].ID;\n\nmsg.topic = \"UPDATE smartAirConditioner \"+\n            \"SET connected = connected^1 \"+\n            \"WHERE ID = \"+conditionerID+\" \"+\n            \"AND connected = 0\";\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 750,
        "y": 220,
        "wires": [
            [
                "8e92ba52f980a9ad"
            ]
        ]
    },
    {
        "id": "aaed698512f936c5",
        "type": "function",
        "z": "b6b5a8360e1f176b",
        "name": "Set Offline",
        "func": "let conditionerID = msg.payload[0].ID;\n\nmsg.topic = \"UPDATE smartAirConditioner \"+\n            \"SET connected = connected^1 \"+\n            \"WHERE ID = \"+conditionerID+\" \"+\n            \"AND connected = 1\";\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 750,
        "y": 300,
        "wires": [
            [
                "0cd8cc6ab63e9269"
            ]
        ]
    },
    {
        "id": "8e92ba52f980a9ad",
        "type": "mysql",
        "z": "b6b5a8360e1f176b",
        "mydb": "3d82484f23ccce80",
        "name": "Query",
        "x": 910,
        "y": 220,
        "wires": [
            []
        ]
    },
    {
        "id": "0cd8cc6ab63e9269",
        "type": "mysql",
        "z": "b6b5a8360e1f176b",
        "mydb": "3d82484f23ccce80",
        "name": "Query",
        "x": 910,
        "y": 300,
        "wires": [
            []
        ]
    },
    {
        "id": "38eaed02328877fd",
        "type": "debug",
        "z": "b6b5a8360e1f176b",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 390,
        "y": 160,
        "wires": []
    },
    {
        "id": "46056c6edf20ecc0",
        "type": "tab",
        "label": "Slave - Configure TensorFlow",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "a7215ca9147117a9",
        "type": "mqtt in",
        "z": "46056c6edf20ecc0",
        "name": "Receive from Master",
        "topic": "cmd/slave/5/1/tensorflow/config",
        "qos": "2",
        "datatype": "json",
        "broker": "54d52f8897b8d24f",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 160,
        "y": 140,
        "wires": [
            [
                "b74c27c1d5ce2611"
            ]
        ]
    },
    {
        "id": "1592d99a2edfeb7c",
        "type": "debug",
        "z": "46056c6edf20ecc0",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 460,
        "y": 120,
        "wires": []
    },
    {
        "id": "6464b742b264f04c",
        "type": "file",
        "z": "46056c6edf20ecc0",
        "name": "Write",
        "filename": "/home/pi/Desktop/smartBuildingResources/tfconfig.json",
        "appendNewline": true,
        "createDir": true,
        "overwriteFile": "true",
        "encoding": "utf8",
        "x": 530,
        "y": 200,
        "wires": [
            []
        ]
    },
    {
        "id": "b74c27c1d5ce2611",
        "type": "function",
        "z": "46056c6edf20ecc0",
        "name": "",
        "func": "let message = {\n    payload:  {\n        epochs: parseInt(msg.payload.epochs),\n        neuronsLayer1: parseInt(msg.payload.neuronsLayer1),\n        neuronsLayer2: parseInt(msg.payload.neuronsLayer2),\n        trainingExecution: msg.payload.trainingExecution\n    }\n}\nreturn message;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 370,
        "y": 200,
        "wires": [
            [
                "6464b742b264f04c",
                "1592d99a2edfeb7c"
            ]
        ]
    },
    {
        "id": "54d52f8897b8d24f",
        "type": "mqtt-broker",
        "name": "HiveMQ",
        "broker": "broker.hivemq.com",
        "port": "1883",
        "clientid": "",
        "autoConnect": true,
        "usetls": false,
        "protocolVersion": "4",
        "keepalive": "60",
        "cleansession": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthPayload": "",
        "birthMsg": {},
        "closeTopic": "",
        "closeQos": "0",
        "closePayload": "",
        "closeMsg": {},
        "willTopic": "",
        "willQos": "0",
        "willPayload": "",
        "willMsg": {},
        "sessionExpiry": ""
    },
    {
        "id": "3d82484f23ccce80",
        "type": "MySQLdatabase",
        "name": "Amazon MySQL",
        "host": "db-iotsystems.cfbti5otvmx7.us-east-1.rds.amazonaws.com",
        "port": "3306",
        "db": "iot-sys",
        "tz": "",
        "charset": "UTF8"
    }
]
